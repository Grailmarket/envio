enum MarketOption {
  NONE
  BEARISH
  BULLISH
}

enum RoundStatus {
  NOT_OPEN
  OPEN
  LIVE
  RESOLVED
  REFUNDING
}

type Round {
  # marketId + round identifier
  id: ID!
  # the round identifier
  roundId: BigInt!
  # market round was opened in
  market: Market!
  # unix timestamp when round entry opened
  openingTime: BigInt!
  # unix timestamp when round entry closes
  closingTime: BigInt!
  # the underlying market asset strike price
  priceMark: BigInt!
  # the underlying market asset closing price
  closingPrice: BigInt!
  # sum of all position shares in round
  totalShares: BigInt!
  # sum of all winning side shares
  winningShares: BigInt!
  # sum of all bullish position shares
  bullishShares: BigInt!
  # sum of all bearish position shares
  bearishShares: BigInt!
  # the reward available for distribution
  rewardPool: BigInt!
  # the state of the round
  status: RoundStatus!
  # the round winning side for `SETTLED` rounds
  winningSide: MarketOption
  # unix timestamp when the market round was created
  createdAt: BigInt!
}

type Position {
  # positionId
  id: ID!
  # the origin chain endpoint identifier
  eid: BigInt!
  # the address of the position owner
  account: String!
  # the market this position was opened
  market: Market!
  # the round this position was opened
  round: Round!
  # the market round position share amount
  share: BigInt!
  # the users position on the market
  option: MarketOption!
  # True, if the user has claimed reward or refund
  claimed: Boolean!
  # True, if refunding stake
  isRefund: Boolean!
  # the amount of reward or refund claimed
  reward: BigInt!
  # unix timestamp when position was created
  createdAt: BigInt!
}

# type Account {
#   # account address
#   id: ID!
#   # this accounts positions
#   positions: [Position!]! @derivedFrom(field: "account")
#   # unix timestamp this account was created at
#   createdAt: BigInt!
#   # the user account balance across chains
#   balance: BigInt!
# }

type ProtocolConfig {
  # chainId + config
  id: ID!
  # the market round duration in seconds
  duration: BigInt!
  # the minimum amount that can be staked
  minStakeAmount: BigInt!
  # the protocolFee charged on this market
  protocolFee: BigInt!
  # true, if the peer confiiguration is locked
  isPeerLocked: Boolean!
}

type Market {
  # chainId + market identifier
  id: ID!
  # market identifier
  marketId: String!
  # unix timestamp when market was created
  createdAt: BigInt!
   # the markets latest round ID
  latestRoundId: BigInt!
  # this markets leaderboard
  leaderBoard: [LeaderBoard!]! @derivedFrom(field: "market")
}

type LeaderBoard {
  # marketId + account + eid
  id: ID!
  # the endpoint identifier
  eid: BigInt!
  # the account
  account: String!
  # the market this leader board is for
  market: Market!
  # the number of rounds positions are opened
  rounds: BigInt!
  # sum of all position stakes in this market
  shares: BigInt!
  # sum of all reward claimed in this market
  reward: BigInt!
}

type Peer {
  # the peer identifier
  id: ID!
  # the peer chain endpoint identifier
  eid: BigInt!
  # the peer contract address
  address: String!
}
